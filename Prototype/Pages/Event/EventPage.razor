@page "/Event/{eventId}"

@using Blazored.SessionStorage
@using Prototype.Models
@using Prototype.Models.Rights
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage



<link href="css/EventPage.css" rel="stylesheet" />

<PageTitle>@currentEvent.Name</PageTitle>

<!--Überschrift-->
<div>
	<h3>@currentEvent.Name</h3>
</div>

<!--Alle wichtigen Informationen über das Event-->
<div class="event-info-section">
	<div>
		<p>Informationen über das Event: </p>
		<p>@currentEvent.Description</p>
	</div>

	<div>
		<p>Datum des Events: </p>
		<p>@currentEvent.Date</p>
	</div>

	<div>
		<p>Uhrzeit: </p>
		<p>@currentEvent.Time</p>
	</div>

	<div>
		<p>Ort der Veranstaltung: </p>
		<p>@currentEvent.Location</p>
	</div>
</div>

<!--An/Ab- meldebutten für das Event-->
<div>
	@if (userSubscribed)
	{
		<button class="unsubscribe" @onclick="EventUnsubscribe">Abmelden</button>
	}
	else
	{
		<button class="subscribe" @onclick="EventSubscribe">Anmelden</button>
	}
</div>

<!--Suite für Organisatoren-->
@if (authority is Organizer || authority is EventOwner)
{
	<div class="organizer-suite">
		<!--Weiterleitung zum bearbeiten des Events-->
		@if (authority.ManageEvent)
		{
			<div>
				<NavLink href="@($"/EventAdministration/{eventId}")">
					Event bearbeiten
				</NavLink>
			</div>
		}
		<!--Löschen des Events-->
		@if (authority.DeleteEvent)
		{
			<div>
				<button @onclick="DeleteEvent">Event löschen</button>
			</div>
		}
	</div>
}



@code {
    private bool isLoggedIn;
    private Person currentUser;
    private string rightsType;
    private Rights authority = new Member();


    // Überprüfung, ob der Nutzer angemeldet ist
    // Zuweisung der angemeldeten Person mit all ihren Rechten
    protected override async Task OnInitializedAsync()
    {
	    isLoggedIn = await SessionStorage.GetItemAsync<bool>("isLoggedIn");
	    if (!isLoggedIn)
	    {
		    Navigation.NavigateTo("/Login");
		    return;
	    }
	    currentUser = await SessionStorage.GetItemAsync<Person>("user");
	    rightsType = await SessionStorage.GetItemAsStringAsync("rightsType");
	    if (rightsType == "Member")
	    {
		    authority = await SessionStorage.GetItemAsync<Member>("rights"); 
	    }
	    else if (rightsType == "Organizer")
	    {
		    authority = await SessionStorage.GetItemAsync<Organizer>("rights");
	    }

		// Das passende Event zur URL finden
	    currentEvent = Application.Instance.GetEvent(int.Parse(eventId));
		// Schauen, ob man bereits angemeldet ist
	    userSubscribed = currentEvent.EventMembers.Contains(currentUser);
    }


	// Das Event, was von der Home Page übergeben wurde
    [Parameter]
    public string eventId{ get; set; }

	// aktuelles Event
    private Event currentEvent = new Event("", new Person("", ""));

	// Ob der Nutzer aktuell am Event teilnimmt
	private bool userSubscribed = false;


	// Der Benutzer meldet sich zu diesem Event an
	// Dem Event wird der Nutzer hinzugefügt + die EventId wird in der Liste der Person aufgenommen
    private void EventSubscribe()
    {
	    if (!currentEvent.EventMembers.Contains(currentUser))
	    {
		    currentUser.Events.Add(currentEvent.Id);
		    currentEvent.EventMembers.Add(currentUser);
		    userSubscribed = true;
	    }
    }


	// Der Benutzer wird vom aktuellen Event abgemeldet
    private void EventUnsubscribe()
    {
	    if (currentEvent.EventMembers.Contains(currentUser))
	    {
		    currentUser.Events.Remove(currentEvent.Id);
		    currentEvent.EventMembers.Remove(currentUser);
		    userSubscribed = false;
	    }
    }


	// Löscht das Event vollständig aus dem Programm
    private void DeleteEvent()
    {
		// TODO: Das Event aus allen Listen löschen
    }
}
