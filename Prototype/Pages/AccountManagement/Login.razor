@page "/Login"

@using Blazored.SessionStorage
@using Prototype.HelperClasses
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage



<link href="css/Login.css" rel="stylesheet" />

<PageTitle>Anmelden</PageTitle>

<h3>Login</h3>
<p>Melden Sie sich mit einem existierenden Benutzer an, oder erstellen Sie einen neuen Account</p>

<!--Textfeld für den Benutzernamen = die E-Mail-->
<label for="nameOrMail">E-Mail:</label>
<InputText id="nameOrMail" @bind-Value="eMail" class="form-control"/>

<!--Textfeld Passwort-->
<label for="password">Passwort:</label>
<InputText id="password" type="password" @bind-Value="password" class="form-control" />

<!--Anmelden Button-->
<button @onclick="tryToLogin">Anmelden</button>

<!--Regestrieren Button-->
<p>Noch keinen Account?</p>
<NavLink href="/Register">
	Neuen Account erstellen
</NavLink>

<!--Der Hinweis, dass ein Feld falsch ausgefüllt wurde oder das Passwort nicht stimmt-->
@if (popupVisible)
{
	<div>
		<div>
			<p>@popupMessage</p>
			<button @onclick="() => popupVisible = false">Schließen</button>
		</div>
	</div>
}

<!--Der Ladekreis, der beim Laden der mainPage läuft-->
@if (loginInProgress)
{
    <div class="d-flex">
        <div class="spinner-border text-primary" role="status">
        </div>
        <span>Anmeldung im Gange, bitte warten...</span>
    </div>
}




@code {
    private String? eMail;
    private String? password;

    private bool popupVisible = false;
    private String popupMessage = "";
    private bool loginInProgress = false;


	// Alle eventuell gespeicherten Anmeldedaten werden gelöscht.
    // Der User wird ausgeloggt
    protected override async Task OnInitializedAsync()
    {
	    SessionStorage.ClearAsync();
    }


    // Wird ausgeführt wenn der Nutzer auf anmelden klickt.
    // Loggt ihn bei richtigen Anmeldedaten ein, sonst erscheint ein Hinweis
    // Man wird auf die Mainpage weitergeleitet
    private async Task tryToLogin()
    {
        if (validateData())
        {
            // Ladekreis
            loginInProgress = true;
            StateHasChanged();
            await Task.Delay(200);

            // Einloggen
            if (await LoginHelper.LogInUser(eMail, password, SessionStorage))
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                loginInProgress = false;
                popupMessage = "Das Passwort ist falsch.";
                popupVisible = true;
            }
	    }
        else
        {
            popupVisible = true;
        }
    }


    // Hilfsfunktion für tryToLogin
    // Eingabevalidierung
    private bool validateData()
    {
	    if (eMail == null)
	    {
            popupMessage = "Bitte geben Sie einen Nutzername ein.";
		    return false;
	    }

	    if (password == null)
	    {
            popupMessage = "Bitte geben Sie ein Passwort ein.";
		    return false;
	    }

	    return true;
    }
}