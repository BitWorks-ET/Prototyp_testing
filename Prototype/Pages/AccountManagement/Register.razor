@page "/Register"

@using BCrypt.Net
@using Blazored.SessionStorage
@using Prototype.HelperClasses
@using Prototype.Models
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage



<link href="css/Register.css" rel="stylesheet" />

<PageTitle>Registrierung</PageTitle>
<h3>Registrieren</h3>
<p>Hier können Sie einen neuen Account erstellen, indem Sie die relevanten Informationen eingeben.</p>


<!--Alle Felder, die der Benutzer zum Regestrieren ausfüllen muss-->
<label for="firstname">Vorname:</label>
<InputText @bind-Value="firstname" placeholder="Max" class="form-control" />

<label for="lastname">Nachname:</label>
<InputText @bind-Value="lastname" placeholder="Mustermann" class="form-control" />

<label for="eMail">E-Mail Adresse:</label>
<InputText id="eMail" @bind-Value="eMail" placeholder="Somebody@greatcompany.de" class="form-control" />

<label for="birthday">Geburtsdatum:</label>
<InputDate id="birthday" @bind-Value="birthday" class="form-control" />

<label for="password">Passwort:</label>
<InputText id="password" type="password" @bind-Value="password" class="form-control" />

<label for="repeatPassword">Passwort wiederholen:</label>
<InputText id="repeatPassword" type="password" @bind-Value="repeatedPassword" class="form-control" />


<!--Der Registrieren Button-->
<button @onclick="tryToRegister">Registrieren</button>

<!--Der Hinweis, dass ein Feld falsch ausgefüllt wurde oder leer ist-->
@if (popupVisible)
{
	<div>
		<div>
			<p>@popupMessage</p>
			<button @onclick="() => popupVisible = false">Schließen</button>
		</div>
	</div>
}

<!--Der Ladekreis, der beim Laden der mainPage läuft-->
@if (registerInProgress)
{
	<div class="d-flex">
		<div class="spinner-border text-primary" role="status">

		</div>
		<span>Registrierung im Gange, bitte warten...</span>
	</div>
}




@code {
	private string? firstname;
	private string? lastname;
	private Gender? gender; // TODO: Dropdown hinzufügen
	private DateTime? birthday;

	private string? eMail;
	private string? password;
	private string? repeatedPassword;

	private bool popupVisible = false;
	private String popupMessage = "";
	private bool registerInProgress = false;


	// Alle eventuell gespeicherten Anmeldedaten werden gelöscht.
	// Der User wird ausgeloggt
	protected override async Task OnInitializedAsync()
	{
		SessionStorage.ClearAsync();
	}


	// Wird ausgeführt wenn der Nutzer auf registriren klickt.
	// Erstellt einen neuen Nutzeraccount
	// Fügt den Account der richtigen Organisaton hinzu (Anhand der Domain)

	// TODO: Wenn es keine Orga gibt?

	// Man wird auf die Mainpage weitergeleitet
	private async Task tryToRegister()
	{
		if (validateData())
		{
			// Ladekreis
			registerInProgress = true;
			StateHasChanged();
			await Task.Delay(200);

			// Account anlegen und anmelden
			createAccount();
			await LoginHelper.LogInUser(eMail, password, SessionStorage);
			Navigation.NavigateTo("/");
		}
		else
		{
			popupVisible = true;
		}
	}


	// Hilfsfunktion von tryToRegister
	// Erstellt Account und fügt ihn einer Organisation hinzu
	private void createAccount()
	{
		Person newPerson = new Person(eMail, BCrypt.HashPassword(password));

		newPerson.FirstName = firstname;
		newPerson.LastName = lastname;
		newPerson.Birthday = birthday;
		newPerson.Gender = gender;

		// Neuen Account einer Organisation zuweisen
		string eMailDomain = eMail.Split('@')[1];
		foreach (Organization organization in Application.Instance.GetOrganizations())
		{
			if (eMailDomain == organization.Domain)
			{
				organization.OrgMembers.Add(newPerson);
				newPerson.OrganizationId = organization.Id;
				break;
			}
		}

		Application.Instance.AddMember(newPerson);
	}


	// Hilfsfunktion von tryToRegister
	// Eingabevalidierung
	private bool validateData()
	{
		if (firstname == null)
		{
			popupMessage = "Bitte geben Sie einen Vornamen ein.";
			return false;
		}

		if (lastname == null)
		{
			popupMessage = "Bitte geben Sie einen Nachnamen ein.";
			return false;
		}

	    if (eMail == null || !eMail.Contains("@"))
	    {
			popupMessage = "Bitte geben Sie eine gültige E-Mail Addresse ein.";
		    return false;
	    }

	    if (password == null)
	    {
			popupMessage = "Bitte geben Sie Ein Password ein.";
		    return false;
	    }

	    if (repeatedPassword == null)
	    {
			popupMessage = "Bitte wiederhohlen Sie ihr Passwort.";
		    return false;
	    }

	    if (password != repeatedPassword)
	    {
		    popupMessage = "Die Passwörter stimmen nicht überein";
		    return false;
	    }

	    return true;
    }
}
