@page "/"

@using BCrypt.Net
@using Blazored.SessionStorage
@using Prototype.Models
@using Prototype.Models.Rights
@inject NavigationManager Navigation
@inject ISessionStorageService SessionStorage



<link href="css/Home.css" rel="stylesheet" />

<PageTitle>Übersicht</PageTitle>

<h1>Willkommen, @currentUser.FirstName!</h1>

<!--Hier werden die Events für den Nutzer aufgelistet-->
<div>

    <!--Checkboxen für die Filter der Eventliste-->
    <div>
        <label class="filter-label">
            <input type="checkbox" @bind="userSignedInToEvent"/> Bereits Angemeldet
        </label>
        <label class="filter-label">
            <input type="checkbox" @bind="eventInThePast"/> Event vorbei
        </label>
    </div>

    <!--Die Liste mit Events-->
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Datum</th>
                <th>Veranstaltungort</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var orgEvent in allEvents)
            {
                <tr>
                    <!--Link zum individuellen Event-->
                    <td><a href="@($"/Event/{orgEvent.Id}")">@orgEvent.Name</a></td>
                    <td>@orgEvent.Date</td>
                    <td>@orgEvent.Location</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!--Suite für Organisatoren-->
@if (authority is Organizer)
{
    <div class="organizer-suite">
        <!--Neues Event erstellen-->
        @if (authority.CreateEvent)
        {
            <NavLink href="/EventAdministration">
                Neues Event Erstellen
            </NavLink>
        }
        <!--Organisation bearbeiten-->
        @if (authority.ManageOrganízation)
        {
            <NavLink href="/manageOrganisation">
                Organisation Verwalten
            </NavLink>
        }
        <!--Link zu Prozess Suite-->
        @if (authority.CreateProcess)
        {
            <NavLink href="/processSuite">
                Prozesse Erstellen
            </NavLink>
        }
    </div>
}



@code
{
    private bool isLoggedIn;
    private Person currentUser = new Person("", "");
    private string rightsType;
    private Rights authority = new Member();


    // Überprüfung, ob der Nutzer angemeldet ist
    // Zuweisung der angemeldeten Person mit all ihren Rechten
    protected override async Task OnInitializedAsync()
    {
        isLoggedIn = await SessionStorage.GetItemAsync<bool>("isLoggedIn");
        if (!isLoggedIn)
        {
            Navigation.NavigateTo("/Login");
            return;
        }
        currentUser = await SessionStorage.GetItemAsync<Person>("user");

        string rightsType = (await SessionStorage.GetItemAsStringAsync("rightsType")).Trim();
        if (string.Equals(rightsType, "\"Member\""))
        {
            authority = await SessionStorage.GetItemAsync<Member>("rights");
        }
        else if (string.Equals(rightsType, "\"Organizer\""))
        {
            authority = await SessionStorage.GetItemAsync<Organizer>("rights");
        }

        // Events, die angezeigt werden
        allEvents = GetAllEvents();
        ApplyFilter();
    }


    // Alle Events
    private List<Models.Event> allEvents = new List<Models.Event>();


    // Gibt alle Events der Organisation zurück
    private List<Models.Event> GetAllEvents()
    {
	    return Application.Instance.GetOrganization(currentUser.OrganizationId).Events;
    }


    // Filter
    private bool userSignedInToEvent = true;
    private bool eventInThePast = true;


    // Filtert die Liste der Events nach Nutzerwünschen
    private void ApplyFilter()
    {
	    allEvents = GetAllEvents();

	    if (userSignedInToEvent)
	    {
		    // TODO: Alle Events filtern, wo der Nutzer nicht angemeldet ist
	    }
	    else
	    {
            // TODO: Alle Events filtern, wo der Nutzer angemeldet ist
	    }

	    if (eventInThePast)
	    {
		    // TODO: Alle Events filtern, die noch anstehen
	    }
	    else
	    {
		    // TODO: Alle Events filtern, die schon waren
	    }
    }
}
